version: '3.8'

services:
  mongo-keyfile:
    image: alpine:3.20
    environment:
      MONGO_REPLICA_KEY: "${MONGO_REPLICA_KEY}"
    command: >
      sh -c 'umask 077 &&
             mkdir -p /data/configdb &&
             printf "%s" "$MONGO_REPLICA_KEY" > /data/configdb/keyfile &&
             chmod 600 /data/configdb/keyfile'
    volumes:
      - mongoconfig:/data/configdb
    restart: "no"
  mongo:
    image: mongo:6.0
    container_name: mongo
    command: >
      bash -lc '
        until [ -s /data/configdb/keyfile ]; do
          echo "[mongo] waiting for /data/configdb/keyfile"; sleep 1;
        done
        # (optional, if your image runs as mongodb: ensure ownership)
        chown 999:999 /data/configdb/keyfile || true
        chmod 600 /data/configdb/keyfile
        exec mongod --bind_ip_all --replSet overleaf --keyFile /data/configdb/keyfile
      '
    volumes:
      - mongoconfig:/data/configdb
      - mongo_data:/data/db
      #- ./mongodb-init-replica-set.js:/docker-entrypoint-initdb.d/mongodb-init-replica-set.js
    environment:
      MONGO_INITDB_DATABASE: overleaf
      MONGO_INITDB_ROOT_USERNAME: "${MONGO_INITDB_ROOT_USERNAME}"
      MONGO_INITDB_ROOT_PASSWORD: "${MONGO_INITDB_ROOT_PASSWORD}"
    healthcheck:
      test:
        - "CMD-SHELL"
        - >
          mongosh "mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@localhost:27017/admin?directConnection=true"
          --quiet --eval 'var h=db.hello(); quit(h&&h.ok&&(h.isWritablePrimary||h.secondary)?0:1)'
      interval: 10s
      timeout: 5s
      retries: 120
      start_period: 30s
  redis:
    image: redis:6.2
    container_name: redis
    volumes:
      - redis_data:/data
  
  mongo-init:
    image: mongo:6.0
    depends_on:
      mongo:
        condition: service_started
      mongo-keyfile:
        condition: service_completed_successfully
    environment:
      MONGO_INITDB_ROOT_USERNAME: "${MONGO_INITDB_ROOT_USERNAME}"
      MONGO_INITDB_ROOT_PASSWORD: "${MONGO_INITDB_ROOT_PASSWORD}"
      APP_DB_USER: "${APP_DB_USER}"
      APP_DB_PASS: "${APP_DB_PASS}"
    command: >
      bash -lc '
        # 1) Initiate the replSet (idempotent)
        mongosh "mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:27017/admin" --eval "
          try {
            rs.initiate({_id: \"overleaf\", members: [{_id:0, host:\"mongo:27017\"}]})
          } catch(e) { print(e) }
          var ok=false; for (let i=0;i<60;i++) {
            const st = rs.status(); if (st.ok && st.members && st.members[0].stateStr===\"PRIMARY\") { ok=true; break }
            sleep(1000)
          }
          if (!ok) { throw new Error(\"Replica set not PRIMARY after wait\") }
        ";

        # 2) Create an application user (idempotent)
        mongosh "mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:27017/admin" --eval "
          db = db.getSiblingDB(\"overleaf\");
          if (!db.getUser(\"${APP_DB_USER}\")) {
            db.createUser({user:\"${APP_DB_USER}\", pwd:\"${APP_DB_PASS}\", roles:[{role:\"readWrite\", db:\"overleaf\"}]});
          }
        ";
        # 3) create role (idempotent)
        mongosh --host mongo --port 27017 -u "$MONGO_INITDB_ROOT_USERNAME" -p "$MONGO_INITDB_ROOT_PASSWORD" --authenticationDatabase admin --eval "
          db = db.getSiblingDB("admin");
          if (!db.getRole("clusterParameterReader")) {
            db.createRole({
              role: "clusterParameterReader",
              privileges: [{ resource: { cluster: true }, actions: ["getParameter"] }],
              roles: []
            });
          }";
        
        # 4) grant role to app user (idempotent)
        mongosh --host mongo --port 27017 -u "$MONGO_INITDB_ROOT_USERNAME" -p "$MONGO_INITDB_ROOT_PASSWORD" --authenticationDatabase admin --eval "
          db = db.getSiblingDB("overleaf");
          db.grantRolesToUser("'"${APP_DB_USER}"'", [{ role: "clusterParameterReader", db: "admin" }]);
        ";
      '
    restart: "no"

      
  overleaf:
    image: "${OVERLEAF_IMAGE:-sharelatex/sharelatex:latest}"
    container_name: overleafselfhost
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      OVERLEAF_SITE_URL: "https://overleaf.draylon.dev"
      OVERLEAF_BEHIND_PROXY: "true"
      OVERLEAF_SECURE_COOKIE: "true"
    
      OVERLEAF_APP_NAME: Overleaf Community Edition
      OVERLEAF_MONGO_URL: "mongodb://${APP_DB_USER}:${APP_DB_PASS}@mongo:27017/overleaf?authSource=overleaf&replicaSet=overleaf"
      OVERLEAF_REDIS_HOST: redis
      REDIS_HOST: redis
      ENABLED_LINKED_FILE_TYPES: 'project_file,project_output_file'
      ENABLE_CONVERSIONS: 'true'
      EMAIL_CONFIRMATION_DISABLED: 'true'
      OVERLEAF_ALLOW_PUBLIC_ACCESS: 'true'
      OVERLEAF_ALLOW_ANONYMOUS_READ_AND_WRITE_SHARING: 'false'
    volumes:
      - sharelatex_data:/var/lib/
    #ports:
    #  - 8010:80  # you can change 8010 to any available host port
    #labels:
    #  - traefik.enable=true
    #  - traefik.docker.network=coolify
    #
    #  # HTTPS router (gets the cert)
    #  - traefik.http.routers.overleaf-https.rule=Host(`overleaf.draylon.dev`)
    #  - traefik.http.routers.overleaf-https.entrypoints=https
    #  - traefik.http.routers.overleaf-https.tls=true
    #  - traefik.http.routers.overleaf-https.tls.certresolver=letsencrypt
    #  - traefik.http.services.overleaf.loadbalancer.server.port=80
    # 
    #  # HTTP router -> redirect to HTTPS
    #  - traefik.http.routers.overleaf-http.rule=Host(`overleaf.draylon.dev`)
    #  - traefik.http.routers.overleaf-http.entrypoints=http
    #  - traefik.http.routers.overleaf-http.middlewares=overleaf-redirect
    #  - traefik.http.middlewares.overleaf-redirect.redirectscheme.scheme=https
